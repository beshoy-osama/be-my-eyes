from pydantic import BaseModel, Field
from typing import List, Dict, Any, Optional
from enum import Enum

class Position(str, Enum):
    """Valid position values"""
    left = "left"
    center = "center"
    right = "right"


class DetectedObject(BaseModel):
    """Detected object with position and confidence"""
    object: str = Field(..., min_length=1, description="Object class name")
    position: Position = Field(..., description="Object position in image")
    confidence: float = Field(..., ge=0.0, le=1.0, description="Detection confidence score")
    


# Response Schemas
class DetectionResponse(BaseModel):
    """Response for object detection"""
    success: bool = Field(..., description="Whether detection was successful")
    caption: Optional[str] = Field( 
        None, 
        description="Accessibility-focused caption generated by VLM (for visually impaired users)"
    ) 
    speech: Optional[Dict[str, Any]] = Field(  
        None,
        description="Speech file information (path, size) for text-to-speech"
    )
    objects: List[DetectedObject] = Field(..., description="List of detected objects")
    total_objects: int = Field(..., ge=0, description="Total number of objects detected")
    original_count: Optional[int] = Field(None, ge=0, description="Original count before confidence filtering")
    error: Optional[str] = Field(None, description="Error message if any")
    processing_time: Optional[float] = Field(None, ge=0, description="Processing time in seconds")


class ErrorResponse(BaseModel):
    """Error response schema"""
    success: bool = Field(False, description="Always false for errors")
    error: str = Field(..., description="Error message")
    error_code: Optional[str] = Field(None, description="Error code")
    details: Optional[Dict[str, Any]] = Field(None, description="Additional error details")

